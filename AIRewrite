import itertools
import os

def calculate_combinations(N, k):
    """Calculate the number of combinations."""
    if k == 0 or k == N:
        return 1
    k -= min(k, N - k)
    result = 1
    for i in range(k):
        result *= N - i
        result //= i + 1
    return result

def read_file(filename):
    """Read the file and extract ligand and fragments."""
    ligand = []
    fragment_list = []
    with open(filename, 'r') as file:
        for line in file:
            if "(Fragment=1)" in line:
                ligand.append(line)
            elif "Fragment=" in line:
                fragment_list.append([line])
            else:
                fragment_list[-1].append(line)
    return ligand, fragment_list

def create_files(ligand, fragment_list, N, output_directory, mem, cores, functional, basis_set, solvent, other_input):
    """Create input files for different combinations of fragments."""
    nCK = calculate_combinations(N, len(fragment_list))
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    print("Creating input files...")
    try:
        for l, combo in zip(range(2, nCK + 2), itertools.combinations(fragment_list, N)):
            file_path = os.path.join(output_directory, f"{l}.com")
            print(f"File path: {file_path}")

            with open(file_path, "w") as outputfile:
                outputfile.write("%chk=" + str(l) + ".chk\n")
                outputfile.write("%mem=" + mem + "GB\n")
                outputfile.write("nprocshared=" + cores + "\n")
                outputfile.write("#" + functional + " " + basis_set + " SCRF=Solvent=" + solvent + ") " + other_input + "\n")
                outputfile.write("\n")
                outputfile.write("TitleCardRequired\n")
                outputfile.write("\n")

                total_charge = 0
                total_multiplicity = 1
                outputfile.write(str(total_charge + total_multiplicity) + "\n")

                for fragment in combo:
                    for line in ligand + fragment_list[fragment]:  # Check if fragment_list is empty
                        outputfile.write(line)
                    outputfile.write("\n\n--Link1--\n\n")

            print(f"File created successfully: {file_path}")

        print(f"All files created successfully in directory: {output_directory}")

    except Exception as e:
        print(f"Error occurred while creating files: {e}")

def main():
    try:
        k = int(input("How many amino acids are in the structure?: "))
        N = int(input("How many amino acids would you like to include in the interaction?: "))
        file_name = input("Enter the filename (Do not include .com): ") + ".com"
        mem = input("How much memory would you like to use (In GB)?: ")
        cores = input("How many cores would you like to use?: ")
        functional = input("Which functional would you like to use?: ")
        basis_set = input("Which basis set would you like to use?: ")
        solvent = input("Which solvent would you like to use? If none, leave blank: ")
        other_input = input("Would you like any other commands in the command line? If none, leave blank: ")

        ligand, fragment_list = read_file(file_name)
        output_directory = "output_files"

        create_files(ligand, fragment_list, N, output_directory, mem, cores, functional, basis_set, solvent, other_input)

    except ValueError:
        print("Invalid input! Please enter a valid integer.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
