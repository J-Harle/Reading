from collections import defaultdict
import itertools

def user_inputs():
    k = 14
    N = int(input("How many amino acids would you like to include in the interaction?: "))
    UnCorrFileName = input("Which file would you like to open? (Do not include .com): ")
    FileName = UnCorrFileName + ".com"
    Mem = str(int(input("How much memory would you like to use (In GB)?: ")))
    Cores = str(int(input("How many cores would you like to use?: ")))
    Functional = input("Which functional would you like to use?: ")
    BasisSet = input("Which basis set would you like to use?: ")
    Solvent = input("Which solvent would you like to use? If none, leave blank: ")
    CorrSolvent = None
    if Solvent and Solvent.lower() != "none":
        CorrSolvent = f"SCRF=(Solvent={Solvent})"
    OtherInput = input("Would you like any other commands in the command line? If none, leave blank: ")
    return N, FileName, Mem, Cores, Functional, BasisSet, CorrSolvent, OtherInput

def reading_file(FileName, k):
    ligand = []
    fragment_list = defaultdict(list)

    with open(FileName, 'r') as file:
        for line in file:
            if "(Fragment=1)" in line:
                ligand.append(line)
            for i in range(2, 14, 1): 
                fragment = "Fragment=" + str(i)
                if fragment in line:
                    fragment_list[i - 1].append(line)

    # Create copies of ligand and fragment lists then line.replace
    bq_ligand = [line.replace(f"(Fragment={i})", "-Bq") for i in range(1, k+3) for line in ligand]
    blank_ligand = [line.replace(f"(Fragment={i})", " ") for i in range(1, k+3) for line in ligand]
    
    bq_fragment_list = {i: [line.replace(f"(Fragment={i+1})", "-Bq") for line in fragment_list[i]] for i in range(1, k+2)}
    blank_fragment_list = {i: [line.replace(f"(Fragment={i+1})", " ") for line in fragment_list[i]] for i in range(1, k+2)}

    return ligand, bq_ligand, blank_ligand, fragment_list, bq_fragment_list, blank_fragment_list

def generate_combinations(fragments, K):
    FragmentCombinations = itertools.combinations(fragments, K)
    return FragmentCombinations

def headers(FragmentCombinations, ligand, user_inputs, bq_ligand, blank_ligand, bq_fragment_list, blank_fragment_list):
    N, FileName, Mem, Cores, Functional, BasisSet, CorrSolvent, OtherInput = user_inputs
    counter = 1  

    # Coordinates to remove if specific pairs are found
    coords_to_remove = {
        "ala_ser": [
            "H    0   -6.55416120   -6.05342200    0.67196340 L",  # Ala coordinates
            "O    0   -7.54013160   -5.79834050    0.49075190 L",    # Ser coordinates:
            "H    0   -8.14204880   -5.89238440    1.23267610 L" 
        ],
        "ser_val": [
            "H    0   -3.02666380   -6.78932410    0.80612210 L",  # Ser coordinates
            "H    0   -4.03060530   -7.09699790    0.36810310 L",   # Val coordinates
            "O    0   -3.99861870   -6.18252120    0.65846340 L"
        ],
        "his_gly3": [
            "O     0   10.29649250   -2.41901770   -0.2378918 L",  # His coordinates:
            "H     0   10.36614620   -1.71366010   0.88536300 L",  
            "H     0    9.84058420   -2.7485774    -0.7157113 L"   # Gly3 coordinate
        ],
    }

    for combo in FragmentCombinations:
        OutputFile = str(counter) + "-New.com"
        with open(OutputFile, "w") as outputfile: 
            FragmentCharge = 0 
            LigandCharge = 0    
            FragmentMultiplicity = 1
            LigandMultiplicity = 1
            TotalCharge = FragmentCharge + LigandCharge
            TotalMultiplicity = max(FragmentMultiplicity, LigandMultiplicity)
            
            BaseHeader = [
                "%chk=" + str(counter) + "-New" + ".chk" + "\n",
                "%mem=" + Mem + "GB" + "\n",
                "%nprocshared=" + Cores + "\n",
                "#" + " " + Functional +  " "+ BasisSet + " " + CorrSolvent + "\n",
                "\n",
                "MSc Project Code" + "\n",
                "\n"
            ]

            w=outputfile.writelines
            TotalHeader = BaseHeader + [str(TotalCharge) + " " + str(TotalMultiplicity) + "\n"]
            LigandHeader = BaseHeader + [str(LigandCharge) + " " + str(LigandMultiplicity) + "\n"]
            FragmentHeader = BaseHeader + [str(FragmentCharge) + " " + str(FragmentMultiplicity) + "\n"]

            # Write headers and data
            w(TotalHeader)
            w(blank_ligand)
            for fragment in combo:
                w(blank_fragment_list[fragment - 1])
            outputfile.write("\n--Link1--\n")
            w(FragmentHeader)
            w(bq_ligand)
            for fragment in combo:
                w(blank_fragment_list[fragment - 1])
            outputfile.write("\n--Link1--\n")
            w(LigandHeader)
            w(blank_ligand)
            for fragment in combo:
                w(bq_fragment_list[fragment - 1])
            outputfile.write("\n")

        # Now, check the generated file for specific amino acid pairs
        with open(OutputFile, "r") as infile:
            lines = infile.readlines()

        # Flags to check presence of pairs
        has_ala = any(coords_to_remove["ala_ser"][0] in line for line in lines)
        has_ser = any(coords_to_remove["ala_ser"][1] in line or coords_to_remove["ser_val"][0] in line for line in lines)
        has_val = any(coords_to_remove["ser_val"][1] in line for line in lines)
        has_his = any(coords_to_remove["his_gly3"][0] in line for line in lines)
        has_gly3 = any(coords_to_remove["his_gly3"][1] in line for line in lines)

        # Determine which pair is present and remove corresponding coordinates
        modified_lines = lines.copy()
        if has_ala and has_ser:
            modified_lines = [line for line in modified_lines if coords_to_remove["ala_ser"][0] not in line and coords_to_remove["ala_ser"][1] not in line]
        if has_ser and has_val:
            modified_lines = [line for line in modified_lines if coords_to_remove["ser_val"][0] not in line and coords_to_remove["ser_val"][1] not in line]
        if has_his and has_gly3:
            modified_lines = [line for line in modified_lines if coords_to_remove["his_gly3"][0] not in line and coords_to_remove["his_gly3"][1] not in line]

        # Write the modified content back to the file
        with open(OutputFile, "w") as outfile:
            outfile.writelines(modified_lines)

        counter += 1


# Execution starts here
user_inputs = user_inputs()
N, FileName, Mem, Cores, Functional, BasisSet, CorrSolvent, OtherInput = user_inputs
ligand, bq_ligand, blank_ligand, fragment_list, bq_fragment_list, blank_fragment_list = reading_file(FileName, N)
FragmentCombinations = generate_combinations(fragment_list.keys(), N)
headers(FragmentCombinations, ligand, user_inputs, bq_ligand, blank_ligand, bq_fragment_list, blank_fragment_list)
